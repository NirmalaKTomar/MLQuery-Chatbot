# -*- coding: utf-8 -*-
"""Query chatbot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nCQVVWbbzV1mdoA8sZlNp8vNmn4lpfgT

Query chatbot using NLTK library
"""

pip install nltk

import nltk
import numpy as np
import random
import string 
import warnings
warnings.filterwarnings("ignore")

"""**DATASET :**

"""

#reading the text file
f=open('ml.txt','r',errors = 'ignore')
raw=f.read()
#convert to lowercase
raw = raw.lower()
print(raw)

"""**Data Preprocessing :**


**Tokenization**: Tokenization is just the term used to describe the process of converting the normal text strings into a list of tokens i.e words that we actually want. Sentence tokenizer can be used to find the list of sentences and Word tokenizer can be used to find the list of words in strings.

**Stopping**: Removing the Stop words. Sometimes, some extremely common words which would appear to be of little value in helping select documents matching a user need are excluded from the vocabulary entirely. These words are called stop words

**Stemming**: Stemming is the process of reducing inflected (or sometimes derived) words to their stem, base or root form — generally a written word form. Example if we were to stem the following words: “Stems”, “Stemming”, “Stemmed”, “and Stemtization”, the result would be a single word “stem”.

**Lemmatization**: A slight variant of stemming is lemmatization. The major difference between these is, that, stemming can often create non-existent words, whereas lemmas are actual words. So, your root stem, meaning the word you end up with, is not something you can just look up in a dictionary, but you can look up a lemma. Examples of Lemmatization are that “run” is a base form for words like “running” or “ran” or that the word “better” and “good” are in the same lemma so they are considered the same.

**The NLTK data package includes a pre-trained Punkt tokenizer for English.**

**WordNet is a semantically-oriented dictionary of English included in NLTK.**
"""

nltk.download('punkt')
nltk.download('wordnet') 
sent_tokens = nltk.sent_tokenize(raw)
word_tokens = nltk.word_tokenize(raw)

#sent_tokens is converting the data into a list of sentences
print(len(sent_tokens))
print(sent_tokens[:10])

#word_tokens is converting the sentences into the tokens
print(len(word_tokens))
print(word_tokens[:20])

#these are the preprocessing functions to return the normalized tokens

lemmer = nltk.stem.WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

print(string.punctuation)

#some keywords for the greeting responses
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey")
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):
 
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

"""**Bag of Words**

After the initial preprocessing phase, we need to transform the text into a meaningful vector (or array) of numbers. The bag-of-words is a representation of text that describes the occurrence of words within a document. It involves two things:

•A vocabulary of known words.

•A measure of the presence of known words.

Why is it is called a “bag” of words? That is because any information about the order or structure of words in the document is discarded and the model is only concerned with whether the known words occur in the document, not where they occur in the document.

The intuition behind the Bag of Words is that documents are similar if they have similar content. Also, we can learn something about the meaning of the document from its content alone.

**For example, if our dictionary contains the words {Learning, is, the, not, great}, and we want to vectorize the text “Learning is great”, we would have the following vector: (1, 1, 0, 0, 1).**

**THE MAIN ALGORITHM**

**TF-IDF Approach**

A problem with the Bag of Words approach is that highly frequent words start to dominate in the document (e.g. larger score), but may not contain as much “informational content”. Also, it will give more weight to longer documents than shorter documents.

One approach is to rescale the frequency of words by how often they appear in all documents so that the scores for frequent words like “the” that are also frequent across all documents are penalized. This approach to scoring is called Term Frequency-Inverse Document Frequency, or TF-IDF for short, where:

**Term Frequency**: is a scoring of the frequency of the word in the current document.

**TF = (Number of times term t appears in a document)/(Number of terms in the document)**

**Inverse Document Frequency**: is a scoring of how rare the word is across documents.

**IDF = 1+log(N/n), where, N is the number of documents and n is the number of documents a term t has appeared in.**

Tf-IDF weight is a weight often used in information retrieval and text mining. This weight is a statistical measure used to evaluate how important a word is to a document in a collection or corpus

**Cosine Similarity**

TF-IDF is a transformation applied to texts to get two real-valued vectors in vector space. We can then obtain the Cosine similarity of any pair of vectors by taking their dot product and dividing that by the product of their norms. That yields the cosine of the angle between the vectors. Cosine similarity is a measure of similarity between two non-zero vectors. Using this formula we can find out the similarity between any two documents d1 and d2.

Cosine Similarity (d1, d2) =  Dot product(d1, d2) / ||d1|| * ||d2||

Now we will implement these functions using the standard libraries
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#This is the main function that takes the user question and generates the chatbot response
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    #initialize the model for tf-idf
    #inputs: Normalized tokens
    #output : bag of words    
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    #find the cosine similarity of the user response with every other sentence in corpus
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0]
    #choose the best response
    i = -2
    while len(sent_tokens[idx[i]].split())<8:
      i-=1
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[i]    
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx[i]]
        return robo_response

#the function that inputs the user response and output the chatbot response
flag=True
print("ROBO: My name is Robo. I will answer your queries about Machine learning. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("ROBO: "+greeting(user_response))
            else:
                print("ROBO: ",end="")
                st = response(user_response)
                if st[0]=='[':
                  i=0
                  while st[i]!=']':
                    i+=1
                  print(st[i+1:])
                else:
                  print(st)
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..")

